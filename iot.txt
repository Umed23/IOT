led:1
import RPI.GPIO as GPIO
       import time
      GPIO.setmode (GPIO.BOARD)
      GPIO.setup(15,GPIO.OUT)
      for i in range(5):
     	 GPIO.output(15,True)
      	print("ON")
      	time.sleep(1)
      	GPIO.output(15,False)
      	print("OFF")
      	time.sleep(1)
      print("Done")
      GPIO.cleanup()

7-segment:

connection:
Board Pin	Function	RPI Physical Pin	Raspberry Function
GND	Ground	14	GND
VCC	+ 5V Power	4	5V
D11	Data In	18	GPIO 24
CLK	Clock	16	GPIO 23

import sys 
import time 
import tm1637 
import datetime
import RPi.GPIO as GPIO 
Display=tm1637.TM1637(23,24,tm1637.BRIGHT_TYPICAL)
Display.Clear() 
Display.SetBrightnes(1) 
while(True):
now = datetime.datetime.now() 
hour = now.hour
minute = now.minute 
second = now.second
currenttime = [ int(hour / 10), hour % 10, int(minute / 10), minute % 10 ] Display.Show(currenttime)
Display.ShowDoublepoint(second % ff5) 
time.sleep(1)




STEPS:
      
  //First visit to the link of Adafruit ADC Oscilloscope given below   https://learn.adafruit.com/adafruit-4-channel-adc-breakouts/python-circuitpython 

    //Need to install the ADC packages from Adafruit by using pip3 
   $ sudo pip3 install adafruit-circuitpython-ads1x15 
   $ sudo pip3 install adafruit-blinka 
  
   $ git clone https://github.com/adafruit/Adafruit_CircuitPython_ADS1x15 $ cd 

       Adafruit_CircuitPython_ADS1x15 $ 
       cd examples

//There will be a program name ads1x15_simpletest.py and run it by using python3
$ python3 ads1x15_simpletest.py

connection:
Board Pin	Function	RPI Physical Pin	Raspberry Function
GND	Ground	6	GND
VDD	+ 5V Power	2	5V
SDA	Inter-Integrated Circuit	3	GPIO 2
SCL	Inter-Integrated Circuit	5	GPIO 3

CODE


import time
import matplotlib.pyplot as plt #import numpy
from drawnow import* #Import the ADS1x15 module. import Adafruit_ADS1x15


#Create an ADS1115 ADC(16-bit)instance. adc=Adafruit_ADS1x15.ADS1115()

GAIN=1
val=[] cnt=0 plt.ion()

#Start continuous ADC conversions on channel 0 using the previous gain value. adc.start_adc(0,gain=GAIN)
print('Reading ADS1x15 channel 0')

#create the figure function def makeFig():
plt.ylim(-5000,5000) plt.title('Osciloscope') plt.grid(True) plt.ylable('ADC outputs')
plt.plot(val,'ro-',label='Channel 0') plt.legend(loc='lower right')

while (True):
#Read the last ADC conversion value and print it out. value=adc.get_last_result()
print('Channel 0:{0}'.format(value)) #Sleep for half a second. time.sleep(0.5) val.append(int(value)) drawnow(makeFig) plt.pause(.000001)
cnt = cnt+1 if(cnt>50):
val.pop(0)



TELEGRAM





import sys
 import time 
import random
 import datetime 
import telepot
import RPI.GPIO as GPIO 
#LED
def on(pin): 
GPIO.output(pin,GPIO.HIGH) 
return
def off(pin):
 GPIO.output(pin,GPIO.LOW)
 return
# to use Raspberry Pi board pin numbers
 GPIO.setmode(GPIO.BOARD)
# set up GPIO output channel 
GPIO.setup(11, GPIO.OUT)
def handle(msg):
chat_id = msg['chat']['id'] 
command = msg['text"]
print ('Got command: %s' % command) 
if command == 'on': 
bot.sendMessage(chat_id, on(11))
elif command == 'off': 
bot.sendMessage(chat_id, off(11))
bot telepot.Bot('AAGM_s70ZCAUROqlt_GZwJ4e6XV6x_zE2gk') 
bot.message_loop(handle)
print 'I am listening..." 
while 1: time.sleep(10)


CAMERA

import time
import picamera
camera=picamera.PiCamera()
camera.resolution=(1024,1024)
camera.start_preview()
time.sleep(10)
camera.capture(‘test.jpg’)
camera.stop_preview()
print(“MARIA LOKHANDWALA”)


STEPS:
i.	Sudo raspi-config
ii.	Select inter4facing options cameraenable
iii.	Sudo reboot
iv.	: After Reboot, Create a folder which is used to store pictures captured by Pi Camera.
       (E.g. /home/pi/Desktop/Visitors)
v.	Write a Python Script to capture images and save them in folder. (capture_record_picamera.py
vi.	Sudo apt-get install python-picamera
vii.	Sudo apt-get install python3-picamera
viii.	Sudo pip install picamera



RFID

1.	Sudo apt-get update
2.	Sudo apt-get upgrade
3.	Sudo raspi-config
4.	lsmod | grep spi
5.	sudo apt-get install python3-dev python3-pip
6.	sudo pip3 install spidev
7.	sudo pip3 install mfrc522
8.	There are two files included in this repository: MFRC522.py which is an implementation of the RFID RC522 circuit. SimpleMFRC522.py that takes the MFRC522.py file and greatly simplifies it.
9.	Pwd
10.	mkdir rfiddemo
11.	cd rfiddemo/
12.	pwd
13.	sudo nano write.py
14.	sudo python3 write.py
15.	name:maria
16.	Write Python script which is used to read this data back off the RFID tag.
17.	Pwd
18.	sudo nano read.py
19.	sudo python3 read.py


connection:
Board Pin	Function	RPI Physical
Pin	Raspberry Function
GND	Ground	6	GND
SDA	Inter-Integrated Circuit	24	GPIO 8
SCK	Serial clock	23	GPIO 11
MOSI	Master out slave in	19	GPIO 10
MISO	Master in slave out	21	GPIO 9
RST	Reset	22	GPIO 25
3.3 V	Power Output Pin	1	3.3 V PWR




RFID Read

import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522 reader = SimpleMFRC522()
 
try:
 

id,text=reader.read() print(id)
print(text)
 
finally:
GPIO.cleanup()


RFID Write

import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522
 reader = SimpleMFRC522()
try:
text = input('New data:') 
print("Now place your tag to write") 
reader.write(text)
print("Written")
 finally:
GPIO.cleanup()


GPS MODULE

connection:

Board Pin	Function	RPI Physical Pin	Raspberry Function
GND	Ground	6	GND
VCC	+ 5V Power	2	5V
Rx	Receiving Data	8	GPIO 15
Tx	Transmitting Data	10	GPIO 14


import serial
from time import sleep import webbrowser import sys

def GPS_Info(): global NMEA_buff
global lat_in_degrees global long_in_degrees nmea_time = [] nmea_latitude=[] nmea_longitude=[]
nmea_time = NMEA_buff[0] nmea_latitude = NMEA_buff[1] nmea_longitude =NMEA_buff[3]

nmea_latitude = 1905.1535
nmea_longitude = 7305.0250

print("NMEA Time: ", nmea_time, '\n')
print("NMEA Latitude:", nmea_latitude,"NMEA longitude:",nmea_longitude,'\n')

lat = float(nmea_latitude) longi = float(nmea_longitude)

lat_in_degrees = convert_to_degrees(lat) long_in_degrees = convert_to_degrees(longi)

def convert_to_degrees(raw_value): decimal_value = raw_value/100.00 degrees=int(decimal_value)
mm_mmmm = (decimal_value - int(decimal_value))/0.6 position= degrees + mm_mmmm
position = "%.4f" %(position) return position
gpgga_info = "$GPGGA,"
ser = serial.Serial("/dev/ttyS0") GPGGA_buffer = 0
NMEA_buff = 0
lat_in_degrees = 0
long_in_degrees = 0

try:
while True:
received_data = (str)(ser.readline()) GPGGA_data_available = received_data.find(gpgga_info)
 



if(GPGGA_data_available>0):
GPGGA_buffer = received_data.split("$GPGGA,",1)[1] NMEA_buff = (GPGGA_buffer.split(','))
GPS_Info()
print("Lat in degrees:",lat_in_degrees," long in degrees:",long_in_degrees,'\n') map_link = 'https://maps.google.com/?q='+lat_in_degrees+','+long_in_degrees print("<<<<<<<<press ctrl+c to plot location on google maps>>>>>>>>>>>>>>\n")
print("	\n")

except KeyboardInterrupt: webbrowser.open(map_link) sys.exit(0)
    
COMMANDS:
1.	Sudo apt-get update
2.	Sudo apt-get upgrade
3.	Sudo nano /boot/config.txt
4.	dtparam=spi=on
5.	dtoverlay=pi3-disable-bt
6.	core freq=250 
7.	enable_uart=1 
8.	force_turbo-1
9.	#config ends To save and
10.	 #exit editor press Ctrl+O> Enter -> ctrl +X
11.	Reboot Raspberry Pi using the command sudo reboots
12.	sudo systemctl enable serial-getty@ttyS0.service
13.	sudo systemctl start serial-getty@ttyS0.service
14.	Reboot Raspberry Pi using the command sudo reboot
15.	Sudo systemctl enable serial-getty@ttyAMA0.service
16.	Sudo apt-get install minicom
17.	Sudo cat /dev/ttyAMA0
